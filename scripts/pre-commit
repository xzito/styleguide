#!/bin/bash
# Pre-commit hook that runs a PHP style check and aborts the commit if
# violations exist.

echo "Running style check..."

function find_config_file() {
  local _executable_name=$1
  local root_path; root_path="$(find_root)"
  local config_path; config_path="$root_path/vendor/xzito/styleguide"
  local path_to_config=""

  case "$_executable_name" in
    "php-cs-fixer")
      path_to_config="$config_path/.php_cs"
      ;;
    "phpcs")
      path_to_config="$config_path/style_ruleset.xml"
      ;;
  esac

  echo "$path_to_config"
}

function find_root() {
  local project_root; project_root="$(git rev-parse --show-toplevel)"

  echo "$project_root"
}

function find_executable() {
  local _executable_name="$1"
  local _root_path="$2"

  locations=(
    "/usr/local/bin/$_executable_name"
    "$_root_path/vendor/bin/$_executable_name"
    "$(command -v "$_executable_name")"
  )

  for location in ${locations[*]}; do
    if [ -x "$location" ]; then
      to_return="$location"
      break
    fi
  done

  if [ ! -x "$to_return" ]; then
    echo "$_executable_name not found (did you run composer install?)"
    exit 1
  fi

  echo "$to_return"
}

function create_unformatted_backups() {
  local _file; _file=$1

	if [ ! -d "$PWD/unformatted" ]; then
		mkdir "$PWD/unformatted"
	fi

	# create new backup directory for any files that will be formatted
	new_dir="$(date +%s)_unformatted"
	new_dir_path="$PWD/unformatted/$new_dir"
	mkdir "$new_dir_path"

	# copy original files to backup directory
	cp "$_file" "$new_dir_path/$(basename "$_file")"
}

# ------------
# Main Routine

# PHPCS Fixer
PHP_CS_FIXER="$(find_executable 'php-cs-fixer')"
config_file="$(find_config_file 'php-cs-fixer')"
PHP_CS_FIXER_CONFIG="--config=$config_file"

#PHP Codesniffer
PHPCS="$(find_executable 'phpcs')"
config_file="$(find_config_file 'phpcs')"
PHPCS_CONFIG="--standard=$config_file"

# Error detection
php_cs_fixer_errors_found=false
php_cs_fixer_error_message=""

phpcs_errors_found=false
phpcs_error_message=""

# Find dirty files and loop
dirty_files=( \
  "$(git status --porcelain \
    | grep -e '^[AM\?{2}].*\.php$' \
    | cut -c 3-)" \
)

for file in ${dirty_files[*]}; do

  # create backups of all files for now.
  create_unformatted_backups "$file"

  # run the fixer
  "$PHP_CS_FIXER" fix "$PHP_CS_FIXER_CONFIG" \
    --diff \
    --verbose \
    --using-cache=no \
    "$file"

  if [ $? -ne 0 ]; then
    php_cs_fixer_error_message+="  - $file\n"
    php_cs_fixer_errors_found=true
  fi

  # run PHPCS on the file last for formatting errors that shouldn't be
  # automatically corrected
  "$PHPCS" "$PHPCS_CONFIG" "$file"
  if [ $? -ne 0 ]; then
    phpcs_error_message+="  - $file\n"
    phpcs_errors_found=true
  fi

done

# There is currently debate about exit codes in php-cs-fixer
# https://github.com/FriendsOfPHP/PHP-CS-Fixer/issues/1211
if [ "$php_cs_fixer_errors_found" = true ]; then
  echo -en "\nPHP Codesniffer updated the following files:\n"
  echo -en "${php_cs_fixer_error_message}"
  echo -en "\nPlease review and commit.\n"
  exit 1
fi

if [ "$phpcs_errors_found" = true ]; then
  echo -en "\nPHP Codesniffer found errors in these files:\n"
  echo -en "${phpcs_error_message}"
  echo -en "\nPlease review, make updates, and retry.\n"
  exit 1
fi

exit 0
